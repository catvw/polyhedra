template <std::size_t D>
inline vector<D>::vector() {
    for (int i = 0; i < D; ++i) {
        v[i] = 0;
    }
}

template <std::size_t D>
template <typename... A>
inline vector<D>::vector(const A... args) {
    static_assert(sizeof...(A) == D,
                  "error: invalid number of arguments to constructor");
    build(flag(), args...);
}

template <std::size_t D>
template <typename T>
inline void vector<D>::build(flag f, const T next) {
    static_assert(std::is_arithmetic<T>::value,
                  "error: T not an arithmetic type");
    v[f.index] = next;
}

template <std::size_t D>
template <typename T,
          typename... A>
inline void vector<D>::build(flag f, const T next, const A... args) {
    static_assert(std::is_arithmetic<T>::value,
                  "error: T not an arithmetic type");
    v[f.index++] = next;
    build(f, args...);
}

/*----------------------------------------------------------------------------*/

template <std::size_t D>
inline double& vector<D>::operator[](const std::size_t index) {
    return v[index];
}

template <std::size_t D>
inline const double& vector<D>::operator[](const std::size_t index) const {
    return v[index];
}

template <std::size_t D>
inline vector<D> operator+(vector<D> lh, const vector<D>& rh) {
    for (int i = 0; i < D; ++i) {
        lh.v[i] += rh.v[i];
    }
    return lh;
}

template <std::size_t D>
inline vector<D> operator-(vector<D> lh, const vector<D>& rh) {
    for (int i = 0; i < D; ++i) {
        lh.v[i] -= rh.v[i];
    }
    return lh;
}

template <std::size_t D>
inline vector<D>& vector<D>::operator*=(const double rh) {
    for (int i = 0; i < D; ++i) {
        v[i] *= rh;
    }
    return *this;
}

template <std::size_t D>
inline vector<D> operator*(vector<D> lh, const double rh) {
    return lh *= rh;
}

template <std::size_t D>
inline double vector<D>::operator*(const vector<D>& rh) const {
    double product = 0;
    for (int i = 0; i < D; ++i) {
        product += v[i] * rh.v[i];
    }
    return product;
}

template <std::size_t D>
inline double vector<D>::operator()() const {
    double sum = 0;
    for (int i = 0; i < D; ++i) {
        sum += v[i] * v[i];
    }
    return sqrt(sum);
}

/*----------------------------------------------------------------------------*/

template <std::size_t D>
inline double vector<D>::angle(const vector<D>& rh) const {
    return std::abs(std::acos(((*this) * rh) / ((*this)() * rh())));
}
