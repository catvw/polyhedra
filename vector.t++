#ifndef VECTOR_TXX
#define VECTOR_TXX

#include <cstddef>
#include <cmath>
#include <ostream>
#include <type_traits>
#include <array>

template <std::size_t D>
class vector;

/* forward declarations to tell the class these are templates */
template <std::size_t D>
vector<D> operator+(vector<D>, const vector<D>&);
template <std::size_t D>
vector<D> operator-(vector<D>, const vector<D>&);
template <std::size_t D>
vector<D> operator*(vector<D>, const double);

/**
 * Simple vector class for my ridiculous polyhedron modeler.
 *
 * @author Charles Van West
 */
template <std::size_t D>
class vector {
public:
    vector();
    
    template <typename... A>
    vector(const A...);
    
    /**
     * Accesses vector members by index.
     *
     * @param the index
     */
    double& operator[](const std::size_t);
    const double& operator[](const std::size_t) const;
    
    friend vector<D> operator+ <> (vector<D>, const vector<D>&);
    friend vector<D> operator- <> (vector<D>, const vector<D>&);
    
    /**
     * Scales a vector.
     */
    vector<D>& operator*=(const double);
    friend vector<D> operator* <> (vector<D>, const double);
    
    /**
     * Finds the dot-product of two vectors.
     */
    double operator*(const vector<D>&) const;
    
    /**
     * Gets the absolute value (length) of the vector.
     */
    double operator()() const;
    
    /**
     * Gets the absolute angle between this vector and another one in radians.
     */
    double angle(const vector<D>&) const;
    
private:
    struct flag { std::size_t index = 0; };
    
    template <typename T>
    void build(flag, const T);
    
    template <typename T,
              typename... A>
    void build(flag, const T, const A...);
    
protected:
    double v[D];
};

/**
 * Specialization for vectors in three-space, to enable cross-products.
 * 
 * @author Charles Van West
 */
template <>
class vector<3> {
public:
    //using ::vector<3>;
    /**
     * Finds the cross-product of two three-vectors.
     */
    vector<3> cross(const vector<3>&);
};

/**
 * Writes a vector to an ostream for easy printing.
 */
template <std::size_t D>
std::ostream& operator<<(std::ostream& os, const vector<D>& v) {
    os << '<';
    if (D > 0) {
        os << v[0];
        for (std::size_t i = 1; i < D; ++i) {
            os << ", " << v[i];
        }
    }
    os << '>';
    return os;
}

#include "vector.impl.t++"

#endif /* VECTOR_TXX */
